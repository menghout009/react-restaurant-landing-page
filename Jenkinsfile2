pipeline {
    agent any

    options {
        buildDiscarder(logRotator(numToKeepStr: '5')) // Keep only the last 5 builds
        timestamps() // Add timestamps to logs
    }

    tools {
        nodejs 'NodeJS' // Replace 'NodeJS' with the name of your NodeJS tool in Jenkins
    }

    stages {
        stage('Preparation') {
            steps {
                echo "Starting the pipeline for ${env.JOB_NAME}"
                sh 'node --version' // Verify Node.js version
                sh 'npm --version'  // Verify npm version
            }
        }

        stage('Install Dependencies') {
            steps {
                echo "Installing project dependencies..."
                sh 'npm install' // Install dependencies
            }
        }

        stage('Build') {
            steps {
                echo "Building the React.js project..."
                sh 'npm run build' // Build the project
            }
        }

        stage('SonarQube Scan') {
            steps {
                echo "Starting SonarQube scan..."
                withSonarQubeEnv('SonarQube') { // Use the configured SonarQube environment 'SonarQube'
                    sh '''
                        npx sonar-scanner \
                        -Dsonar.projectKey=React-demo \
                        -Dsonar.projectName=ReactApp \
                        -Dsonar.sources=. \
                        -Dsonar.host.url=http://34.87.163.238:9000 \
                        -Dsonar.login=sqp_bbcfe788bdcb0351d9fd0156b0564b0e1058a827
                    ''' // Run SonarQube analysis for JavaScript
                }
            }
        }

        stage('Quality Gate') {
            steps {
                script {
                    echo "Waiting for SonarQube quality gate results..."
                    timeout(time: 30, unit: 'MINUTES') { // Set a timeout of 30 minutes
                        def qualityGate = waitForQualityGate() // Wait for the quality gate results
                        if (qualityGate.status != 'OK') {
                            error "Pipeline failed due to quality gate failure: ${qualityGate.status}"
                        }
                    }
                    echo "SonarQube analysis results available at: http://34.87.163.238:9000/dashboard?id=React-demo"
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                echo "Building the Docker image for the React app..."
                writeFile file: 'Dockerfile', text: '''
                # Use an official Node.js runtime as the base image
                FROM node:14

                # Set the working directory inside the container
                WORKDIR /app

                # Copy package.json and package-lock.json to the working directory
                COPY package*.json ./

                # Install the project dependencies
                RUN npm install

                # Copy the rest of the application files to the container
                COPY . .

                # Build the React app for production
                RUN npm run build

                # Expose the port that the app will run on
                EXPOSE 3000

                # Start the React app
                CMD ["npm", "start"]
                '''
                sh '''
                    docker build -t react-app:latest .
                '''
            }
        }
    }

    post {
        success {
            echo "✅ Pipeline completed successfully for ${env.JOB_NAME}."
        }
        failure {
            echo "❌ Pipeline failed. Check logs for details."
        }
        always {
            echo "Pipeline execution finished."
        }
    }
}
